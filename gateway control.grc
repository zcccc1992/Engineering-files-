options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: untitled
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: cf
  id: variable
  parameters:
    comment: ''
    value: 915e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [470, 25]
    rotation: 0
    state: enabled
- name: cutoff
  id: variable
  parameters:
    comment: ''
    value: 500e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [652, 33]
    rotation: 0
    state: enabled
- name: minus
  id: variable
  parameters:
    comment: ''
    value: -np.zeros (period // 2, dtype=np.float32)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [348, 129]
    rotation: 0
    state: true
- name: ones
  id: variable
  parameters:
    comment: ''
    value: np.ones (period // 2, dtype=np.float32)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [134, 128]
    rotation: 0
    state: true
- name: period
  id: variable
  parameters:
    comment: ''
    value: int(samp_rate / 1e3)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [21, 129]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [265, 12]
    rotation: 0
    state: enabled
- name: wave6
  id: variable
  parameters:
    comment: ''
    value: np.tile(np.hstack([ones, minus]), 8)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [583, 128]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [419, 436]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '10000'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [826, 493]
    rotation: 0
    state: true
- name: blocks_tag_debug_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'True'
    filter: '"tx_chirp"'
    name: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1150, 669]
    rotation: 0
    state: disabled
- name: blocks_tag_gate_0
  id: blocks_tag_gate
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    propagate_tags: 'False'
    single_key: '""'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [436, 689]
    rotation: 0
    state: true
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: complex
    vector: wave6
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [194, 844]
    rotation: 0
    state: disabled
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '10000'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 493]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nimport numpy as np\nfrom gnuradio import gr\nimport\
      \ pmt\n\nimport numpy as np\nfrom gnuradio import gr\nimport pmt\n\nimport numpy\
      \ as np\nfrom gnuradio import gr\nimport pmt\n\nclass BitCounter(gr.sync_block):\n\
      \    def __init__(self):\n        gr.sync_block.__init__(self,\n           \
      \ name=\"BitCounter\",\n            in_sig=[np.complex64],\n            out_sig=[np.int8])\n\
      \        self.n_ones = 0\n        self.last   = 0\n\n    def work(self, input_items,\
      \ output_items):\n        in0 = input_items[0]\n        out = output_items[0]\n\
      \        n   = len(in0)\n        out[:n] = in0   \n        for i, x in enumerate(in0):\n\
      \            mag = 1 if abs(x) > 0.5 else 0 \n            if mag and not self.last:\
      \ \n                self.n_ones += 1\n                self.add_item_tag(0, self.nitems_written(0)\
      \ + i,\n                                  pmt.intern('bit_cnt'),\n         \
      \                         pmt.from_long(self.n_ones))\n            self.last\
      \ = mag  \n        return n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BitCounter', 'BitCounter', [], [('0', 'complex', 1)], [('0', 'byte',
      1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [685, 709]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass ChirpTrigger(gr.sync_block):\n\
      \    def __init__(self, target=6):\n        gr.sync_block.__init__(self,\n \
      \           name=\"ChirpTrigger\",\n            in_sig=[np.uint8],\n       \
      \     out_sig=[np.uint8])\n        self.target = target\n    def work(self,\
      \ input_items, output_items):\n        n = len(input_items[0])\n        tags\
      \ = self.get_tags_in_range(0, self.nitems_read(0),\n                       \
      \               self.nitems_read(0)+n)\n        for tag in tags:\n         \
      \   if pmt.eq(tag.key, pmt.intern('bit_cnt')):\n                cnt = pmt.to_long(tag.value)\n\
      \                if cnt >= self.target:\n                    self.add_item_tag(0,\
      \ tag.offset,\n                                      pmt.intern('tx_chirp'),\n\
      \                                      pmt.from_bool(True))\n        output_items[0][:n]\
      \ = input_items[0]\n        return n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    target: '6'
  states:
    _io_cache: ('ChirpTrigger', 'ChirpTrigger', [('target', '6')], [('0', 'byte',
      1)], [('0', 'byte', 1)], '', ['target'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [892, 697]
    rotation: 0
    state: true
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass ChirpGen(gr.sync_block):\n  \
      \  def __init__(self, samp_rate=1e6, f0=100e3, f1=400e3, duration=10e-3):\n\
      \        gr.sync_block.__init__(self,\n            name=\"ChirpGen\",\n    \
      \        in_sig=[np.int8],\n            out_sig=[np.complex64])\n        self.samp_rate\
      \ = samp_rate\n        self.f0, self.f1, self.T = f0, f1, duration\n       \
      \ self.chirp = self._make_chirp()\n        self.tx_left = 0\n        self.cycling\
      \ = False \n        self.idx = 0 \n    def _make_chirp(self):\n        N = int(self.T*self.samp_rate)\n\
      \        t = np.arange(N)/self.samp_rate\n        k = (self.f1-self.f0)/self.T\n\
      \        return np.exp(1j*2*np.pi*(self.f0*t + 0.5*k*t*t)).astype(np.complex64)\n\
      \    def work(self, input_items, output_items):\n        n = len(output_items[0])\n\
      \        out = output_items[0]\n\n        tags = self.get_tags_in_range(0, self.nitems_read(0),\n\
      \                                    self.nitems_read(0) + n)\n        for tag\
      \ in tags:\n            if pmt.eq(tag.key, pmt.intern('tx_chirp')):\n      \
      \          print('ChirpGen: got tx_chirp @ offset', self.nitems_read(0))\n \
      \               self.cycling = True\n                break\n\n        if self.cycling:\n\
      \            print('ChirpGen: emitting', n, 'samples, idx=', self.idx)\n   \
      \         for i in range(n):\n                out[i] = self.chirp[self.idx]\n\
      \                self.idx = (self.idx + 1) % len(self.chirp)\n        else:\n\
      \            out[:] = 1\n\n        return n"
    affinity: ''
    alias: ''
    comment: ''
    duration: '0.001'
    f0: '100000.0'
    f1: '400000.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('ChirpGen', 'ChirpGen', [('samp_rate', '1000000.0'), ('f0', '100000.0'),
      ('f1', '400000.0'), ('duration', '0.01')], [('0', 'byte', 1)], [('0', 'complex',
      1)], '', ['f0', 'f1', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [923, 224]
    rotation: 0
    state: true
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass RefChirp(gr.sync_block):\n    def\
      \ __init__(self, samp_rate=1e6, f0=100e3, f1=400e3, duration=10e-3):\n     \
      \   gr.sync_block.__init__(self,\n            name=\"RefChirp\",\n         \
      \   in_sig=[np.uint8],\n            out_sig=[np.complex64])\n        N = int(duration*samp_rate)\n\
      \        t = np.arange(N)/samp_rate\n        k = (f1-f0)/duration\n        self.chirp\
      \ = np.exp(1j*2*np.pi*(f0*t + 0.5*k*t*t)).astype(np.complex64)\n        self.idx\
      \ = 0\n        self.pass_through = False \n    def work(self, input_items, output_items):\n\
      \        n = len(output_items[0])\n        out = output_items[0]\n        M\
      \ = len(self.chirp)\n        tags = self.get_tags_in_range(1, self.nitems_read(1),\n\
      \                                      self.nitems_read(1)+n)\n        for tag\
      \ in tags:\n            if pmt.eq(tag.key, pmt.intern('tx_chirp')):\n      \
      \          self.pass_through = True\n                break\n        if self.pass_through:\n\
      \            for i in range(n):\n                out[i] = self.chirp[self.idx]\n\
      \                self.idx = (self.idx+1) % M\n        else:\n            out[:]\
      \ = 1\n        return n"
    affinity: ''
    alias: ''
    comment: ''
    duration: 10e-3
    f0: 400e3
    f1: 100e3
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('RefChirp', 'RefChirp', [('samp_rate', '1000000.0'), ('f0', '100000.0'),
      ('f1', '400000.0'), ('duration', '0.01')], [('0', 'byte', 1)], [('0', 'complex',
      1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [197, 292]
    rotation: 0
    state: true
- name: epy_block_4
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np, zmq,\
      \ pmt, json\nfrom gnuradio import gr\n\n\nclass PeakDetector(gr.sync_block):\n\
      \    def __init__(self, samp_rate=1e6, fft_size=2048):\n        gr.sync_block.__init__(\n\
      \            self,\n            name=\"PeakDetector\",\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.float32, np.float32] \n        )\n        self.samp_rate\
      \ = samp_rate\n        self.fft_size = fft_size\n        self.window = np.blackman(fft_size)\n\
      \        self.buf = np.zeros(fft_size, dtype=np.complex64)\n        self.cnt\
      \ = 0\n\n    def work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \        n_in = len(in0)\n\n        out_val = output_items[0]   # peak magnitude\n\
      \        out_freq = output_items[1]  # peak frequency\n        n_out = len(out_val)\
      \    \n\n        produced = 0     \n\n        for i in range(n_in):\n      \
      \      self.buf[self.cnt] = in0[i]\n            self.cnt += 1\n\n          \
      \  if self.cnt == self.fft_size:\n                spec = np.fft.fft(self.buf\
      \ * self.window)\n                mag = np.abs(spec)\n                idx =\
      \ int(np.argmax(mag))\n\n                peak_freq = idx * self.samp_rate /\
      \ self.fft_size\n                if idx > self.fft_size // 2:\n            \
      \        peak_freq -= self.samp_rate\n\n                if produced < n_out:\n\
      \                    out_val[produced] = float(mag[idx])\n                 \
      \   out_freq[produced] = float(peak_freq)\n                    produced += 1\n\
      \n                self.cnt = 0\n\n        self.produce(0, produced)  \n    \
      \    self.produce(1, produced)\n        return n_in  \n"
    affinity: ''
    alias: ''
    comment: ''
    fft_size: '10000'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('PeakDetector', 'PeakDetector', [('samp_rate', '1000000.0'), ('fft_size',
      '2048')], [('0', 'complex', 1)], [('0', 'float', 1), ('1', 'float', 1)], '',
      ['fft_size', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1671, 473]
    rotation: 0
    state: true
- name: epy_block_5
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass ChirpGate(gr.sync_block):\n   \
      \ def __init__(self, item_size=gr.sizeof_gr_complex):\n        gr.sync_block.__init__(self,\n\
      \            name=\"ChirpGate\",\n            in_sig=[np.complex64, np.uint8],\n\
      \            out_sig=[np.complex64])\n        self.pass_through = False \n\n\
      \    def work(self, input_items, output_items):\n        n = len(output_items[0])\n\
      \        data_in = input_items[0]\n        trig_in = input_items[1] \n     \
      \   out     = output_items[0]\n\n        tags = self.get_tags_in_range(1, self.nitems_read(1),\n\
      \                                      self.nitems_read(1)+n)\n        for tag\
      \ in tags:\n            if pmt.eq(tag.key, pmt.intern('tx_chirp')):\n      \
      \          self.pass_through = True\n                break\n\n        if self.pass_through:\n\
      \            out[:] = data_in[:n]\n        else:\n            out[:] = 1\n \
      \       return n\n"
    affinity: ''
    alias: ''
    comment: ''
    item_size: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('ChirpGate', 'ChirpGate', [('item_size', '8')], [('0', 'complex',
      1), ('1', 'byte', 1)], [('0', 'complex', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [234, 515]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: '10000'
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(2048)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 441]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [802, 46]
    rotation: 0
    state: true
- name: low_pass_filter_1
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: cutoff
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: cutoff/4
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [580, 421]
    rotation: 0
    state: true
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '""'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1742, 238]
    rotation: 0
    state: disabled
- name: qtgui_number_sink_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '""'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1741, 343]
    rotation: 0
    state: disabled
- name: qtgui_number_sink_1
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '5'
    min: '-5'
    name: '""'
    nconnections: '1'
    type: byte
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1051, 866]
    rotation: 0
    state: disabled
- name: qtgui_sink_x_0_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"1"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: firdes.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1117, 71]
    rotation: 0
    state: true
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: TX/RX
    ant1: TX/RX
    ant10: TX/RX
    ant11: TX/RX
    ant12: TX/RX
    ant13: TX/RX
    ant14: TX/RX
    ant15: TX/RX
    ant16: TX/RX
    ant17: TX/RX
    ant18: TX/RX
    ant19: TX/RX
    ant2: TX/RX
    ant20: TX/RX
    ant21: TX/RX
    ant22: TX/RX
    ant23: TX/RX
    ant24: TX/RX
    ant25: TX/RX
    ant26: TX/RX
    ant27: TX/RX
    ant28: TX/RX
    ant29: TX/RX
    ant3: TX/RX
    ant30: TX/RX
    ant31: TX/RX
    ant4: TX/RX
    ant5: TX/RX
    ant6: TX/RX
    ant7: TX/RX
    ant8: TX/RX
    ant9: TX/RX
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: cf
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: '""'
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    len_tag_name: ''
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1389, 186]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: RX2
    ant1: RX2
    ant10: RX2
    ant11: RX2
    ant12: RX2
    ant13: RX2
    ant14: RX2
    ant15: RX2
    ant16: RX2
    ant17: RX2
    ant18: RX2
    ant19: RX2
    ant2: RX2
    ant20: RX2
    ant21: RX2
    ant22: RX2
    ant23: RX2
    ant24: RX2
    ant25: RX2
    ant26: RX2
    ant27: RX2
    ant28: RX2
    ant29: RX2
    ant3: RX2
    ant30: RX2
    ant31: RX2
    ant4: RX2
    ant5: RX2
    ant6: RX2
    ant7: RX2
    ant8: RX2
    ant9: RX2
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: cf
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs_enb0: '""'
    dc_offs_enb1: '""'
    dc_offs_enb10: '""'
    dc_offs_enb11: '""'
    dc_offs_enb12: '""'
    dc_offs_enb13: '""'
    dc_offs_enb14: '""'
    dc_offs_enb15: '""'
    dc_offs_enb16: '""'
    dc_offs_enb17: '""'
    dc_offs_enb18: '""'
    dc_offs_enb19: '""'
    dc_offs_enb2: '""'
    dc_offs_enb20: '""'
    dc_offs_enb21: '""'
    dc_offs_enb22: '""'
    dc_offs_enb23: '""'
    dc_offs_enb24: '""'
    dc_offs_enb25: '""'
    dc_offs_enb26: '""'
    dc_offs_enb27: '""'
    dc_offs_enb28: '""'
    dc_offs_enb29: '""'
    dc_offs_enb3: '""'
    dc_offs_enb30: '""'
    dc_offs_enb31: '""'
    dc_offs_enb4: '""'
    dc_offs_enb5: '""'
    dc_offs_enb6: '""'
    dc_offs_enb7: '""'
    dc_offs_enb8: '""'
    dc_offs_enb9: '""'
    dev_addr: '""'
    dev_args: '""'
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    iq_imbal_enb0: '""'
    iq_imbal_enb1: '""'
    iq_imbal_enb10: '""'
    iq_imbal_enb11: '""'
    iq_imbal_enb12: '""'
    iq_imbal_enb13: '""'
    iq_imbal_enb14: '""'
    iq_imbal_enb15: '""'
    iq_imbal_enb16: '""'
    iq_imbal_enb17: '""'
    iq_imbal_enb18: '""'
    iq_imbal_enb19: '""'
    iq_imbal_enb2: '""'
    iq_imbal_enb20: '""'
    iq_imbal_enb21: '""'
    iq_imbal_enb22: '""'
    iq_imbal_enb23: '""'
    iq_imbal_enb24: '""'
    iq_imbal_enb25: '""'
    iq_imbal_enb26: '""'
    iq_imbal_enb27: '""'
    iq_imbal_enb28: '""'
    iq_imbal_enb29: '""'
    iq_imbal_enb3: '""'
    iq_imbal_enb30: '""'
    iq_imbal_enb31: '""'
    iq_imbal_enb4: '""'
    iq_imbal_enb5: '""'
    iq_imbal_enb6: '""'
    iq_imbal_enb7: '""'
    iq_imbal_enb8: '""'
    iq_imbal_enb9: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [127, 637]
    rotation: 0
    state: enabled
- name: zeromq_pub_sink_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:5555
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1525, 639]
    rotation: 0
    state: enabled
- name: zeromq_pub_sink_0_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:6666
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1519, 863]
    rotation: 0
    state: enabled

connections:
- [blocks_multiply_xx_0, '0', low_pass_filter_1, '0']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [blocks_tag_gate_0, '0', epy_block_0, '0']
- [blocks_vector_source_x_0, '0', blocks_tag_gate_0, '0']
- [blocks_vector_source_x_0, '0', epy_block_5, '0']
- [blocks_vector_to_stream_0, '0', epy_block_4, '0']
- [epy_block_0, '0', epy_block_1, '0']
- [epy_block_1, '0', blocks_tag_debug_0, '0']
- [epy_block_1, '0', epy_block_2, '0']
- [epy_block_1, '0', epy_block_3, '0']
- [epy_block_1, '0', epy_block_5, '1']
- [epy_block_1, '0', qtgui_number_sink_1, '0']
- [epy_block_2, '0', qtgui_sink_x_0_0, '0']
- [epy_block_2, '0', uhd_usrp_sink_0, '0']
- [epy_block_3, '0', blocks_multiply_xx_0, '0']
- [epy_block_4, '0', qtgui_number_sink_0, '0']
- [epy_block_4, '0', zeromq_pub_sink_0, '0']
- [epy_block_4, '1', qtgui_number_sink_0_0, '0']
- [epy_block_4, '1', zeromq_pub_sink_0_0, '0']
- [epy_block_5, '0', blocks_multiply_xx_0, '1']
- [fft_vxx_0, '0', blocks_vector_to_stream_0, '0']
- [low_pass_filter_1, '0', blocks_stream_to_vector_0, '0']
- [uhd_usrp_source_0, '0', blocks_tag_gate_0, '0']
- [uhd_usrp_source_0, '0', epy_block_5, '0']

metadata:
  file_format: 1
